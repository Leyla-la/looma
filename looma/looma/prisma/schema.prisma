// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// USER & AUTH MODELS
// =================================

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String
  credits       Int           @default(100)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  generations   Generation[]
  models        Model[]
  likes         Like[]
  followers     Follow[]      @relation("Following")
  following     Follow[]      @relation("Follower")
}

// =================================
// GENERATION MODELS
// =================================

model Generation {
  id              String            @id @default(cuid())
  prompt          String
  negativePrompt  String?
  
  type            GenerationType    @default(IMAGE)
  status          GenerationStatus  @default(PENDING)
  
  // Generation parameters
  width           Int               @default(1024)
  height          Int               @default(1024)
  seed            Int?
  steps           Int?
  cfgScale        Float?
  sampler         String?
  
  // Visibility and social
  isPublic        Boolean           @default(false)
  likesCount      Int               @default(0)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  
  baseModel       Model?            @relation("BaseModel", fields: [baseModelId], references: [id])
  baseModelId     String?
  
  loraModels      Model[]           @relation("LoraModels")
  
  results         GenerationResult[]
  likes           Like[]
  
  // For remixing
  parentGeneration  Generation?       @relation("Remix", fields: [parentGenerationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentGenerationId String?
  remixes         Generation[]      @relation("Remix")
}

model GenerationResult {
  id            String      @id @default(cuid())
  url           String      // URL to the generated asset (e.g., in MinIO/S3)
  isUpscaled    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  generation    Generation  @relation(fields: [generationId], references: [id])
  generationId  String
}

// =================================
// MODEL & COMMUNITY MODELS
// =================================

model Model {
  id            String      @id @default(cuid())
  name          String
  description   String?
  type          ModelType   // e.g., CHECKPOINT, LORA, TEXTUAL_INVERSION
  baseModel     String?     // e.g., "SDXL 1.0", "SD 1.5"
  
  isPublic      Boolean     @default(true)
  downloadUrl   String?
  triggerWords  String[]
  
  createdAt     DateTime    @default(now())
  
  // Relations
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  
  // For model usage tracking
  generationsAsBase   Generation[] @relation("BaseModel")
  generationsWithLora Generation[] @relation("LoraModels")
}

model Like {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  
  generation    Generation  @relation(fields: [generationId], references: [id])
  generationId  String

  @@unique([userId, generationId])
}

model Follow {
  id            String    @id @default(cuid())
  follower      User      @relation("Follower", fields: [followerId], references: [id])
  followerId    String
  following     User      @relation("Following", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime  @default(now())

  @@unique([followerId, followingId])
}


// =================================
// ENUMS
// =================================

enum GenerationType {
  IMAGE
  VIDEO
  COMIC
  WEBTOON
  CARTOON
  GAME_ASSET
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ModelType {
  CHECKPOINT // Base model
  LORA       // Style/character modification model
  TEXTUAL_INVERSION
  VAE
}
